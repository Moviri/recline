// # Recline Backbone Models
this.recline=this.recline||{},this.recline.Model=this.recline.Model||{},function(a,b){b.Dataset=Backbone.Model.extend({constructor:function(){Backbone.Model.prototype.constructor.apply(this,arguments)},initialize:function(){_.bindAll(this,"query"),this.backend=null,this.get("backend")?this.backend=this._backendFromString(this.get("backend")):this.get("records")&&(this.backend=recline.Backend.Memory),this.fields=new b.FieldList,this.records=new b.RecordList,this._changes={deletes:[],updates:[],creates:[]},this.facets=new b.FacetList,this.recordCount=null,this.queryState=new b.Query,this.get("initialState")&&this.get("initialState").setState(this),this.queryState.bind("change",this.query),this.queryState.bind("facet:add",this.query),this._store=this.backend,this.backend==recline.Backend.Memory&&this.fetch()},fetch:function(){function d(a){var d=b._normalizeRecordsAndFields(a.records,a.fields);a.useMemoryStore&&(b._store=new recline.Backend.Memory.Store(d.records,d.fields)),b.set(a.metadata),recline.Data.FieldsUtility.setFieldsAttributes(d.fields,b);var e={renderer:recline.Data.Formatters.Renderers};b.fields.reset(d.fields,e),b.query().done(function(){c.resolve(b)}).fail(function(a){c.reject(a)})}var b=this,c=a.Deferred();return this.backend!==recline.Backend.Memory?this.backend.fetch(this.toJSON()).done(d).fail(function(a){console.log("Fail in fetching data"),c.reject(a)}):d({records:this.get("records"),fields:this.get("fields"),useMemoryStore:!0}),c.promise()},_normalizeRecordsAndFields:function(a,b){!b&&a&&a.length>0&&(a[0]instanceof Array?(b=a[0],a=a.slice(1)):b=_.map(_.keys(a[0]),function(a){return{id:a}}));if(b&&b.length>0&&typeof b[0]!="object"){var c={};b=_.map(b,function(a,b){a=a.toString();var d=a.replace(/^\s+|\s+$/g,"");d===""&&(d="_noname_",a=d);while(d in c)c[a]+=1,d=a+c[a];return a in c||(c[a]=0),{id:d}})}return a&&a.length>0&&a[0]instanceof Array&&(a=_.map(a,function(a){var c={};return _.each(b,function(b,d){c[b.id]=a[d]}),c})),{fields:b,records:a}},save:function(){var a=this;return this._store.save(this._changes,this.toJSON())},transform:function(a){var b=this;if(!this._store.transform){alert("Transform is not supported with this backend: "+this.get("backend"));return}this.trigger("recline:flash",{message:"Updating all visible docs. This could take a while...",persist:!0,loader:!0}),this._store.transform(a).done(function(){b.query(),b.trigger("recline:flash",{message:"Records updated successfully"})})},query:function(b){var c=this,d=a.Deferred();this.trigger("query:start"),b&&this.queryState.set(b,{silent:!0});var e=this.queryState.toJSON();return _.each(c.attributes.customFilterLogic,function(a){a(e)}),console.log("Query on model ["+(c.attributes.id?c.attributes.id:"")+"] query ["+JSON.stringify(e)+"]"),this._store.query(e,this.toJSON()).done(function(a){c._handleQueryResult(a),c.trigger("query:done"),d.resolve(c.records)}).fail(function(a){c.trigger("query:fail",a),d.reject(a)}),d.promise()},_handleQueryResult:function(a){var c=this;c.recordCount=a.total;if(a.fields&&c.fields.length==0){var d={renderer:recline.Data.Formatters.Renderers};c.fields.reset(a.fields,d)}var e=_.map(a.hits,function(a){var d=new b.Record(a);return d.fields=c.fields,d.bind("change",function(a){c._changes.updates.push(a.toJSON())}),d.bind("destroy",function(a){c._changes.deletes.push(a.toJSON())}),d});recline.Data.Filters.applySelectionsOnData(c.queryState.get("selections"),e,c.fields),c.records.reset(e);if(a.facets){var f=_.map(a.facets,function(a,d){a.id=d;var e=new b.Facet(a);return recline.Data.ColorSchema.addColorsToTerms(d,e.attributes.terms,c.attributes.colorSchema),recline.Data.ShapeSchema.addShapesToTerms(d,e.attributes.terms,c.attributes.shapeSchema),e});c.facets.reset(f)}},toTemplateJSON:function(){var a=this.toJSON();return a.recordCount=this.recordCount,a.fields=this.fields.toJSON(),a},getFieldsSummary:function(){var c=this,d=new b.Query;d.set({size:0}),this.fields.each(function(a){d.addFacet(a.id)});var e=a.Deferred();return this._store.query(d.toJSON(),this.toJSON()).done(function(a){a.facets&&_.each(a.facets,function(a,d){a.id=d;var e=new b.Facet(a);c.fields.get(d).facets.reset(e)}),e.resolve(a)}),e.promise()},recordSummary:function(a){return a.summary()},_backendFromString:function(a){var b=null;return recline&&recline.Backend&&_.each(_.keys(recline.Backend),function(c){c.toLowerCase()===a.toLowerCase()&&(b=recline.Backend[c])}),b},getFacetByFieldId:function(a){return _.find(this.facets.models,function(b){return b.id==a})}}),b.Record=Backbone.Model.extend({constructor:function(){Backbone.Model.prototype.constructor.apply(this,arguments)},initialize:function(){_.bindAll(this,"getFieldValue"),this.is_selected=!1},getFieldValue:function(a){var b=this.getFieldValueUnrendered(a);return a.renderer&&(b=a.renderer(b,a,this.toJSON())),b},getFieldValueUnrendered:function(a){var b;try{b=this.get(a.id)}catch(c){throw"Model: unable to read field ["+a.id+"] from dataset"}return a.deriver&&(b=a.deriver(b,a,this)),b},summary:function(a){var b=this,c='<div class="recline-record-summary">';return this.fields.each(function(a){a.id!="id"&&(c+='<div class="'+a.id+'"><strong>'+a.get("label")+"</strong>: "+b.getFieldValue(a)+"</div>")}),c+="</div>",c},fetch:function(){},save:function(){},destroy:function(){this.trigger("destroy",this)}}),b.RecordList=Backbone.Collection.extend({constructor:function(){Backbone.Collection.prototype.constructor.apply(this,arguments)},model:b.Record}),b.Field=Backbone.Model.extend({constructor:function(){Backbone.Model.prototype.constructor.apply(this,arguments)},defaults:{label:null,type:"string",format:null,is_derived:!1,is_partitioned:!1,colorSchema:null,shapeSchema:null},virtualModelFields:{label:null,type:"string",format:null,is_derived:!1,is_partitioned:!1,partitionValue:null,partitionField:null,originalField:null,colorSchema:null,aggregationFunction:null},initialize:function(a,c){if("0"in a)throw new Error("Looks like you did not pass a proper hash with id to Field constructor");this.attributes.label===null&&this.set({label:this.id}),this.attributes.type.toLowerCase()in this._typeMap&&(this.attributes.type=this._typeMap[this.attributes.type.toLowerCase()]),c&&(this.renderer=c.renderer,this.deriver=c.deriver),!this.deriver&&a.deriver&&(this.deriver=a.deriver),this.renderer||(this.renderer=this.defaultRenderers[this.get("type")]),this.facets=new b.FacetList},_typeMap:{text:"string","double":"number","float":"number",numeric:"number","int":"integer",datetime:"date-time",bool:"boolean",timestamp:"date-time",json:"object"},defaultRenderers:{object:function(a,b,c){return JSON.stringify(a)},geo_point:function(a,b,c){return JSON.stringify(a)},number:function(a,b,c){var d=b.get("format");return d==="percentage"?a+"%":a},string:function(a,b,c){var d=b.get("format");if(d==="markdown"){if(typeof Showdown!="undefined"){var e=new Showdown.converter;return out=e.makeHtml(a),out}return a}return d=="plain"?a:(a&&typeof a=="string"&&(a=a.replace(/(https?:\/\/[^ ]+)/g,'<a href="$1">$1</a>')),a)},date:function(a,b,c){var d=parseInt(a);return!isNaN(d)&&isFinite(a)?d:new Date(a)}}}),b.FieldList=Backbone.Collection.extend({constructor:function(){Backbone.Collection.prototype.constructor.apply(this,arguments)},model:b.Field}),b.Query=Backbone.Model.extend({constructor:function(){Backbone.Model.prototype.constructor.apply(this,arguments)},defaults:function(){return{from:0,q:"",facets:{},filters:[],selections:[]}},_filterTemplates:{term:{type:"term",field:"",term:""},termAdvanced:{type:"term",operator:"eq",field:"",term:""},list:{type:"term",field:"",list:[]},range:{type:"range",field:"",start:"",stop:""},geo_distance:{type:"geo_distance",distance:10,unit:"km",point:{lon:0,lat:0}}},_selectionTemplates:{term:{type:"term",field:"",term:""},range:{type:"range",field:"",start:"",stop:""}},addFilter:function(a){var b=JSON.parse(JSON.stringify(a));_.keys(a).length<=3&&(b=_.extend(this._filterTemplates[a.type],b));var c=this.get("filters");c.push(b),this.trigger("change:filters:new-blank")},getFilters:function(){return this.get("filters")},getFilterByFieldName:function(a){var b=_.find(this.get("filters"),function(b){return b.field==a});return b==-1?null:b},setFilter:function(a){if(a.remove)this.removeFilterByField(a.field),delete a.remove;else{var b=this.get("filters"),c=!1;for(var d=0;d<b.length;d++)b[d].field==a.field&&(b[d]=a,c=!0);c||b.push(a)}},removeFilter:function(a){var b=this.get("filters");b.splice(a,1),this.set({filters:b}),this.trigger("change")},removeFilterByField:function(a){var b=this.get("filters");for(var c in b)b[c].field==a&&this.removeFilter(c)},clearFilter:function(a){var b=this.get("filters");for(var c in b)if(b[c].field==a){b[c].term=null,b[c].start=null,b[c].stop=null;break}},addSortCondition:function(a,b){var c=this.get("sort");c?c.push({field:a,order:b}):c=[{field:a,order:b}],this.attributes.sort=c,this.trigger("change:filters:sort")},setSortCondition:function(a){var b=this.get("sort");b?b.push(a):b=[a],this.attributes.sort=b},clearSortCondition:function(){this.attributes.sort=null},addFacet:function(a,b){this.addFacetNoEvent(a,b),this.trigger("facet:add",this)},addFacetNoEvent:function(a,b){var c=this.get("facets");if(_.contains(_.keys(c),a))return;var d=!1;b&&(d=!0),c[a]={terms:{field:a,all_terms:d}},this.set({facets:c},{silent:!0})},addHistogramFacet:function(a){var b=this.get("facets");b[a]={date_histogram:{field:a,interval:"day"}},this.set({facets:b},{silent:!0}),this.trigger("facet:add",this)}}),b.Facet=Backbone.Model.extend({constructor:function(){Backbone.Model.prototype.constructor.apply(this,arguments)},defaults:function(){return{_type:"terms",total:0,other:0,missing:0,terms:[]}}}),b.FacetList=Backbone.Collection.extend({constructor:function(){Backbone.Collection.prototype.constructor.apply(this,arguments)},model:b.Facet}),b.ObjectState=Backbone.Model.extend({}),Backbone.sync=function(a,b,c){return b.backend.sync(a,b,c)}}(jQuery,this.recline.Model),this.recline=this.recline||{},this.recline.Backend=this.recline.Backend||{},this.recline.Backend.Memory=this.recline.Backend.Memory||{},function(a,b){b.__type__="memory",b.Store=function(b,c){var d=this;this.data=b,this.distinctFieldsValues={},c?this.fields=c:b&&(this.fields=_.map(b[0],function(a,b){return{id:b,type:"string"}})),this.update=function(a){_.each(d.data,function(b,c){a.id===b.id&&(d.data[c]=a)})},this.remove=function(a){var b=_.reject(d.data,function(b){return a.id===b.id});this.data=b},this.save=function(b,c){var d=this,e=a.Deferred();return _.each(b.updates,function(a){d.update(a)}),_.each(b.deletes,function(a){d.remove(a)}),e.resolve(),e.promise()},this.query=function(b){var c=a.Deferred(),d=b.size||this.data.length,e=b.from||0,f=this.data;f=recline.Data.Filters.applyFiltersOnData(b.filters,f,this.fields),f=this._applyFreeTextQuery(f,b),_.each(b.sort,function(a){var b=a.field;f=_.sortBy(f,function(a){var c=a[b];return c}),a.order=="desc"&&f.reverse()});var g=this.computeFacets(f,b),h={total:f.length,hits:f.slice(e,e+d),facets:g};return c.resolve(h),c.promise()},this.getFacetsOnUnfilteredData=function(a){return this.queryObj!=null&&!_.isEqual(a.facets,this.queryObj)&&this.unfilteredFacets!=null?this.unfilteredFacets:(this.queryObj=a,this.unfilteredFacets=this.computeFacets(this.data,a),this.unfilteredFacets)},this._applyFreeTextQuery=function(a,b){if(b.q){var c=b.q.split(" "),e=_.map(c,function(a){return new RegExp(a.toLowerCase())});a=_.filter(a,function(a){var b=!0;return _.each(e,function(c){var e=!1;_.each(d.fields,function(b){var d=a[b.id];d!==null&&d!==undefined?d=d.toString():d="",e=e||c.test(d.toLowerCase())}),b=b&&e}),b})}return a},this.computeFacets=function(a,b){var c=this,d={};return b.facets?(_.each(b.facets,function(a,b){d[b]=(new recline.Model.Facet({id:b})).toJSON(),d[b].termsall={}}),_.each(a,function(a){_.each(b.facets,function(b,c){var e=b.terms.field,f=a[e],g=d[c];f?g.termsall[f]=g.termsall[f]?{count:g.termsall[f].count+1,value:f}:{count:1,value:f}:g.missing=g.missing+1})}),this.updateDistinctFieldsForFaceting(b),_.each(b.facets,function(a,b){var e=d[b],f=_.difference(c.distinctFieldsValues[b],_.map(e.termsall,function(a){return a.value}));_.each(f,function(a){e.termsall[a]={count:0,value:a}})}),_.each(b.facets,function(a,b){var c=d[b],e=_.map(c.termsall,function(a,b){return{term:a.value,count:a.count}});c.terms=_.sortBy(e,function(a){return-a.count})}),d):d},this.updateDistinctFieldsForFaceting=function(a){var b=this;this.distinctFieldsValues==null&&(this.distinctFieldsValues={});var c=[];_.each(a.facets,function(a,d){a.terms.all_terms&&b.distinctFieldsValues[d]==null&&c.push(d)}),c.length>0&&(_.each(c,function(a){b.distinctFieldsValues[a]=[]}),_.each(b.data,function(a){_.each(c,function(c){b.distinctFieldsValues[c].push(a[c])})})),_.each(c,function(a){b.distinctFieldsValues[a]=_.uniq(b.distinctFieldsValues[a])})},this.transform=function(a){var b=recline.Data.Transform.mapDocs(this.data,a);return _.each(b.updates,function(a,b){d.data[b]=a}),this.save(b)},this.getDataParser=function(a){var b={};_.each(d.fields,function(a){b[a.id]=a});var c=b[a.field],e="string";return c==null?(console.log("Warning could not find field "+a.field+" for dataset "),console.log(d)):e=c.type,recline.Backend.Memory.dataParsers[e]},this.filterFunctions={term:function(a,b,c){var d=c.getDataParser(b),e=d(a[b.field]),f=d(b.term);return e===f},range:function(a,b,c){var e=c.getDataParser(b),f=d(a[b.field]),g=e(b.start),h=e(b.stop);return f>=g&&f<=h}}}}(jQuery,this.recline.Backend.Memory);